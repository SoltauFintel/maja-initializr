package ${packageName};

#if ($auth)
import de.mwvb.maja.auth.AuthPlugin;
import de.mwvb.maja.auth.AuthorizationDispatcher;
import de.mwvb.maja.auth.MultiAuthFeature;
#end
#if ($facebook)
import de.mwvb.maja.auth.facebook.FacebookAuthorization;
import de.mwvb.maja.auth.facebook.FacebookFeature;
#end
#if ($google)
import de.mwvb.maja.auth.google.GoogleAuthorization;
import de.mwvb.maja.auth.google.GoogleFeature;
#end
#if ($authMongo)
import de.mwvb.maja.auth.rememberme.KnownUser;
import de.mwvb.maja.auth.rememberme.RememberMeInMongoDB;
#end
#if ($mongo)
import de.mwvb.maja.mongo.Database;
#end
import de.mwvb.maja.web.AbstractWebApp;
import ${packageName}.actions.Index;
#if ($auth)
import spark.Request;
#end

public class ${appClassName} extends AbstractWebApp {
	public static final String VERSION = "0.1.0";
#if ($mongo)	
	public static Database database;
	public static final String DBNAME = "${projectName}";
#end

	@Override
	protected void routes() {
		_get("/", Index.class);
	}
	
	public static void main(String[] args) {
		new ${appClassName}().start(VERSION);
	}
#if ($mongo)

	@Override
	protected void initDatabase() {
		database = new Database(config.get("dbhost", "localhost"), config.get("dbname", DBNAME),
				config.get("dbuser"), config.get("dbpw"),
				KnownUser.class); // TODO add your entity
	}
	
	@Override
	protected String getDatabaseInfo() {
		return "MongoDB database: " + config.get("dbname", DBNAME) + "@" + config.get("dbhost", "localhost")
			+ (config.get("dbpw") == null ? "" : " with password");
	}
#end
#if ($auth)
	
	@Override
	protected void init() {
#if ($facebook && $google && $authMongo)	
		auth = new AuthPlugin(
				new AuthorizationDispatcher(new FacebookAuthorization(), new GoogleAuthorization()),
				new MultiAuthFeature(new FacebookFeature(), new GoogleFeature()),
				new RememberMeInMongoDB(database, "${projectName_uppercase}"));
#end				
#if ($facebook && $google && !$authMongo)	
		auth = new AuthPlugin(
				new AuthorizationDispatcher(new FacebookAuthorization(), new GoogleAuthorization()),
				new MultiAuthFeature(new FacebookFeature(), new GoogleFeature()));
#end				
#if ($facebook && !$google && $authMongo)	
		auth = new AuthPlugin(
				new FacebookAuthorization(),
				new FacebookFeature(),
				new RememberMeInMongoDB(database, "${projectName_uppercase}"));
#end				
#if ($facebook && !$google && !$authMongo)	
		auth = new AuthPlugin(new FacebookAuthorization(), new FacebookFeature());
#end				
#if (!$facebook && $google && $authMongo)	
		auth = new AuthPlugin(
				new GoogleAuthorization(),
				new GoogleFeature(),
				new RememberMeInMongoDB(database, "${projectName_uppercase}"));
#end				
#if (!$facebook && $google && !$authMongo)	
		auth = new AuthPlugin(new GoogleAuthorization(), new GoogleFeature());
#end				
	}

	public static String getUserId(Request req) {
		String userId = AuthPlugin.getUserId(req.session());
		if (userId == null || userId.isEmpty()) {
			throw new RuntimeException("User Id ist leer!"); // Programmschutz
		}
		return userId;
	}
#end
}
